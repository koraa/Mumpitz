#! /usr/bin/env python
#
# Data:   1/19/2012
# Author: Karolin Varner
#
# (C) Copyright 2012 by Karolin Varner
#
#############################################################################
#
# This file is part of Mumpitz.
#
# Mumpitz is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Mumpitz is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Mumpitz. If not, see <http://www.gnu.org/licenses/>.
#
#############################################################################
#
# This file contains an executable wrapper for the mumpitz.
#

import sys
import inspect
import argparse
import mumpitz


##################
# Commands

# The prefix any invokable command starts with
prefix_command = "command_"

def command_overview(tree, args):
    def ft(node):
        if not isinstance(node, mumpitz.Channel):
            return True
        elif node.parent==None:
            return True
        else:
            return node.parent.has_users()
    print(tree.filter_tree(ft).overview())
    
def command_dump_channels(tree, args):
    for e in filter( lambda x : isinstance(x, mumpitz.Channel), tree.flatten()):
        print(unicode(e))

def command_dump_users(tree, args):
    for e in filter( lambda x : isinstance(x,mumpitz.User), tree.flatten()):
        print(unicode(e))

def command_dump(tree, args):
    command_dump_users(tree, args)
    command_dump_channels(tree, args)

##################
#

def list_commands():
    """ Generate a dict like {name, command} """
    # List all elements in this module => ( ($(prefix_command) + name, object|function|else), )
    members = inspect.getmembers(sys.modules[__name__])
    # Only allow  functions with name pattern "$(prefix_command).*" => ( ($(prefix_command) + name, function), ) 
    members = filter(lambda m : inspect.isfunction(m[1]) and m[0].startswith(prefix_command), members)
    # Remove the $(command_prefix) from the name => ( (name, function),  )
    members = map(lambda f : (f[0][len(prefix_command):], f[1]), members)
    # Convert to dict => { name: function }
    return dict(members)

def getargs():
    """ Parse any arguments """
    parser = argparse.ArgumentParser(add_help=True)
    parser.add_argument(
        '--url', '-u', dest="url", 
        default="http://www.nooblounge.net/mumble-django/mumble/1.json")
    parser.add_argument('command', default='overview')
    return parser.parse_args()

commands = list_commands()
args = getargs()

cmdargs = []
tree = mumpitz.create_tree(args.url)

# Call the specified command
commands[args.command](tree, cmdargs)
